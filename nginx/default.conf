# Custom log format with timestamp and path
log_format custom_format '$time_iso8601 - $remote_addr - "$request" - $status - "$request_uri" - $upstream_addr';

upstream service1_backend {
    server service_1:8001;
}

upstream service2_backend {
    server service_2:8002;
}

server {
    listen 80;
    server_name localhost;

    # Custom access log
    access_log /var/log/nginx/access.log custom_format;
    error_log /var/log/nginx/error.log;

    # Health check endpoint for nginx itself
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Route /service1 requests to service1
    location /service1/ {
        rewrite ^/service1/(.*)$ /$1 break;
        proxy_pass http://service1_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Route /service2 requests to service2
    location /service2/ {
        rewrite ^/service2/(.*)$ /$1 break;
        proxy_pass http://service2_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Default route - return service information
    location / {
        return 200 '{"message": "Nginx Reverse Proxy", "available_services": ["/service1/", "/service2/"], "health_check": "/health"}';
        add_header Content-Type application/json;
    }

    # Handle exact /service1 and /service2 paths (without trailing slash)
    location = /service1 {
        return 301 /service1/;
    }

    location = /service2 {
        return 301 /service2/;
    }
}